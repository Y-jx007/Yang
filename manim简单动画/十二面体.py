from manimlib.imports import *
from numpy import *

class 前言(Scene):

    def construct(self):

        Text1=TextMobject("“神以","正十二面体","整理","漫天星座”")
        Text1[1].set_color(YELLOW)
        Text1[0].set_color(BLUE_A)
        Text1[2::].set_color(BLUE_A)
        Text1.scale(1.5)
        Text2=TextMobject("——柏拉图")
        Text2.next_to(Text1[3],DOWN*3,aligned_edge=LEFT)
        self.play(Write(Text1))
        self.play(Write(Text2))
        v1=VGroup(Text1,Text2)
        self.wait(2)
        Text3=TextMobject("对晚自习与神遨游的中学生").scale(0.9)
        Text3.to_edge(UP)
        Text4=TextMobject("神难免会给予些许旨意").scale(0.9)
        Text4.next_to(Text3,DOWN)
        Text5=TextMobject("赐予其宝贵的摸鱼时光").scale(0.9)
        Text5.next_to(Text4,DOWN)
        Text6=TextMobject("以下求","单位边长正十二面体体积","的灵感").scale(0.9)
        Text6[1].set_color(YELLOW)
        Text6.next_to(Text5,DOWN)
        Text7=TextMobject("就来自我的某位与神共游").scale(0.9)
        Text7.next_to(Text6,DOWN)
        Text8=TextMobject("忍痛摸鱼两节课的同学").scale(0.9)
        Text8.next_to(Text7,DOWN)
        Text9=TextMobject("它不需要求二面角与正五边形面积").scale(0.9)
        Text9.next_to(Text8,DOWN)
        Text10=TextMobject("没有复杂的运算与根号套根号的形式").scale(0.9)
        Text10.next_to(Text9,DOWN)
        Text11=TextMobject("只需用到勾股定理").scale(0.9)
        Text11.next_to(Text10,DOWN)
        Text12=TextMobject("虽然早被前人发现").scale(0.9)
        Text12.next_to(Text11,DOWN)
        Text13=TextMobject("亦为吾等摸鱼之辈一快").scale(0.9)
        Text13.next_to(Text12,DOWN)
        bigv=VGroup(Text3,Text4,Text5,Text6,Text7,Text8,Text9,Text10,Text11,Text12,Text13)
        self.play(FadeTransform(v1,bigv))
        self.wait(12)
        self.play(FadeOut(Text3),FadeOut(Text4),FadeOut(Text5),FadeOut(Text6),FadeOut(Text7)\
                  ,FadeOut(Text8),FadeOut(Text9),FadeOut(Text10),FadeOut(Text11),FadeOut(Text12),FadeOut(Text13))
        
class 十二面体(ThreeDScene):

    CONFIG = {
        'order': 3,
        'size': 4.2,
        'camera_init': {
            'phi':-80* DEGREES,
            'gamma':0*DEGREES,
            'theta':0* DEGREES,
        },
    }

    def setup(self):

        self.set_camera_orientation(**self.camera_init)

    def construct(self):
        
        L=[]
        while len(L)<5:
            L.append([cos(2*PI/5*(len(L)-1)),sin(2*PI/5*(len(L)-1)),0])
        v=Polygon(L[0],L[1],L[2],L[3],L[4])
        m_1=[L[1][0]-L[2][0],L[1][1]-L[2][1],L[1][2]-L[2][2]]
        m_2=[L[2][0]-L[3][0],L[2][1]-L[3][1],L[2][2]-L[3][2]]
        m_3=[L[3][0]-L[4][0],L[3][1]-L[4][1],L[3][2]-L[4][2]]
        m_4=[L[4][0]-L[0][0],L[4][1]-L[0][1],L[4][2]-L[0][2]]
        m_5=[L[0][0]-L[1][0],L[0][1]-L[1][1],L[0][2]-L[1][2]]
        M=[m_1,m_2,m_3,m_4,m_5]
        self.play(Write(v))
        half_1=VGroup(v)
        for i in range(0,5):
            v_i=v.copy().rotate(axis=M[i],angle=arccos(-sqrt(5)/5),about_point=L[(i+1)%5]).set_color(PINK)
            self.play(Write(v_i))
            half_1.add(v_i)
        half_2=half_1.copy()
        self.play(half_2.set_color,GREEN)
        self.play(half_2.flip,axis=[cos(PI/5),sin(PI/5),0],about_point=[0,0,2])
        self.play(half_2.move_to,half_1.get_center()*sqrt(5))
        half_2.rotate(axis=[0,0,1],angle=2*PI/5,about_point=ORIGIN)
        whole=VGroup(half_1,half_2)#十二面体
        self.play(whole.set_color,ORANGE)
        self.begin_ambient_camera_rotation(rate=0.4)#开始转动
        self.wait(2)
        five=whole[0][3].copy()#五边形
        self.play(five.move_to,five.get_center())
        self.play(FadeOut(whole))
        self.wait(2)
        d_1=five.get_vertices()
        三角=Polygon(d_1[0],d_1[1],d_1[2])#三角形
        self.play(Write(三角))
        self.play(FadeOut(five))
        self.play(三角.scale,2)
        短边=TextMobject("短边"," = ","1")
        长边=TextMobject("长边 =")
        顶角=TexMobject("\\text{顶角} = \\frac{3\\pi}{5}")
        self.add_fixed_in_frame_mobjects(短边.move_to([-6,3.6,0]))
        self.add_fixed_in_frame_mobjects(顶角.next_to(短边,DOWN,aligned_edge=LEFT))
        self.add_fixed_in_frame_mobjects(长边.next_to(顶角,DOWN,aligned_edge=LEFT))
        short=Line(d_1[0],d_1[1])
        long=Line(d_1[0],d_1[2])
        self.play(Write(短边),Write(顶角),Write(长边))
        余弦=TexMobject("\\sqrt{\\text{短边}^2+\\text{短边}^2-2\\text{短边}^2*cos(\\text{顶角})}")
        self.add_fixed_in_frame_mobjects(余弦.next_to(长边,RIGHT,buff=0.5))
        self.play(Write(余弦))
        余弦值=TexMobject("\\sqrt{\\text{1}^2+\\text{1}^2-2*cos(\\frac{3\\pi}{5}})}")
        self.play(ReplacementTransform(余弦,余弦值.next_to(长边,RIGHT,buff=0.5)))
        self.add_fixed_in_frame_mobjects(余弦值.next_to(长边,RIGHT,buff=0.5))
        self.wait(2.8)
        self.stop_ambient_camera_rotation()
        字幕_1=VGroup(短边,长边,顶角,余弦值)
        self.play(FadeOut(字幕_1))
        self.wait()
        求值=TexMobject("\\text{现在来求}cos(\\frac{3\\pi}{5})")
        求值.move_to([-5,3,0])
        self.add_fixed_in_frame_mobjects(求值.move_to([-5,3,0]))
        self.play(Write(求值))
        self.wait()
        d_2=三角.get_vertices()
        dot=Dot().set_color(YELLOW)
        分点=array(d_2[0])*(sqrt(5)+1)/(sqrt(5)+3)+array(d_2[2])*2/(sqrt(5)+3)
        self.play(dot.move_to,分点)
        self.play(Write(dot))
        l_求值=Line(d_2[1],分点)
        self.play(Write(l_求值))
        小三角=Polygon(分点,d_2[0],d_2[1]).set_color(YELLOW)
        self.play(ShowCreation(小三角))
        相似=TextMobject("小三角形与大三角形相似")
        self.play(ReplacementTransform(求值,相似,run_time=3))
        self.add_fixed_in_frame_mobjects(相似)
        self.play(FadeOut(相似))
        变量=TextMobject("已知大三角形的腰为1，设小三角形的腰为x")
        self.add_fixed_in_frame_mobjects(变量)
        self.play(ShowCreation(变量))
        x_1=TextMobject("1").set_color(PURPLE)
        x_2=TextMobject("1").set_color(PURPLE)
        x_3=TextMobject("x").set_color(PURPLE)
        self.add_fixed_in_frame_mobjects(x_1.move_to([1,0.6,0]),x_2.move_to([-1.4,2,0]),x_3.move_to([-1.4,0.6,0]))
        self.play(Write(x_1),Write(x_2),Write(x_3))
        方程=TexMobject("\\text{由相似条件得}\\frac{x}{1}=\\frac{1}{1+x}")
        self.add_fixed_in_frame_mobjects(方程.next_to(变量,DOWN))
        self.play(ShowCreation(方程))
        self.add_fixed_in_frame_mobjects(方程.next_to(变量,DOWN))
        self.wait()
        方程变形=TexMobject("x^2+x-1=0")
        self.play(ReplacementTransform(方程,方程变形.next_to(变量,DOWN*1.5)))
        self.add_fixed_in_frame_mobjects(方程变形.next_to(变量,DOWN*1.5))
        self.wait()
        self.play(FadeOut(方程变形))
        解方程=TexMobject("\\text{解得}x=\\frac{\\sqrt{5}-1}{2}")
        self.add_fixed_in_frame_mobjects(解方程.next_to(变量,DOWN*1.5))
        self.play(ShowCreation(解方程))
        self.wait()
        疑惑一=TextMobject("等等，已经求出长边了")
        疑惑二=TexMobject("\\text{我还求}cos(\\frac{3\\pi}{5})\\text{作甚?}")
        self.play(FadeOut(变量))
        self.wait()
        self.add_fixed_in_frame_mobjects(疑惑一.next_to(解方程,UP))
        self.play(ShowCreation(疑惑一))
        self.wait()
        self.play(FadeOut(疑惑一))
        self.wait()
        self.add_fixed_in_frame_mobjects(疑惑二.next_to(解方程,UP))
        self.play(ShowCreation(疑惑二))
        self.wait()
        self.play(FadeOut(解方程))
        长边长=TexMobject("\\text{长边}=1+x=1+\\frac{\\sqrt{5}-1}{2}=\\frac{\\sqrt{5}+1}{2}")
        self.add_fixed_in_frame_mobjects(长边长.next_to(疑惑二,DOWN))
        self.play(Write(长边长))
        self.play(FadeOut(疑惑二))
        self.play(FadeOut(长边长[3:11]))
        self.play(长边长[11::].next_to,长边长[0:2])       
        x=VGroup(x_1,x_2,x_3)
        self.play(FadeOut(x))
        self.play(FadeOut(三角),FadeOut(小三角),FadeOut(dot),FadeOut(l_求值))
        self.begin_ambient_camera_rotation(rate=0.4)#转动开始
        self.play(ShowCreation(短边))
        self.play(FadeOut(长边长))
        长边新=TexMobject("\\text{长边}"," = ","\\frac{\\sqrt{5}+1}{2}")
        self.add_fixed_in_frame_mobjects(长边新.next_to(短边,DOWN,aligned_edge=LEFT))
        self.play(ShowCreation(长边新))
        底点=whole[0][0].get_vertices()
        一点=whole[0][1].get_vertices()
        二点=whole[0][2].get_vertices()
        三点=whole[0][3].get_vertices()
        四点=whole[0][4].get_vertices()
        五点=whole[0][5].get_vertices()
        
        底上=whole[1][0].get_vertices()
        一上=whole[1][1].get_vertices()
        二上=whole[1][2].get_vertices()
        三上=whole[1][3].get_vertices()
        四上=whole[1][4].get_vertices()
        五上=whole[1][5].get_vertices()

        Line_1=Line(底点[0],底点[3]).set_color(GREEN)
        Line_2=Line(一点[0],一点[3]).set_color(GREEN)
        Line_3=Line(二点[1],二点[3]).set_color(GREEN)
        Line_4=DashedLine(三点[1],三点[3]).set_color(GREEN)
        Line_5=Line(四点[0],四点[2]).set_color(GREEN)
        Line_6=Line(五点[0],五点[2]).set_color(GREEN)
        Line_7=Line(底上[0],底上[3]).set_color(GREEN)
        Line_8=DashedLine(一上[0],一上[3]).set_color(GREEN)
        Line_9=DashedLine(二上[1],二上[3]).set_color(GREEN)
        Line_10=Line(三上[1],三上[3]).set_color(GREEN)
        Line_11=Line(四上[0],四上[2]).set_color(GREEN)
        Line_12=Line(五上[0],五上[2]).set_color(GREEN)

        正方形=VGroup(Line_1,Line_2,Line_3,Line_4,Line_5,Line_6,Line_7,Line_8,Line_9,Line_10,Line_11,Line_12)

        Line_1x=DashedLine(底点[0],底点[3]).set_color(GREEN)
        Line_2x=DashedLine(一点[0],一点[3]).set_color(GREEN)
        Line_3x=DashedLine(二点[1],二点[3]).set_color(GREEN)
        Line_4x=DashedLine(三点[1],三点[3]).set_color(GREEN)
        Line_5x=DashedLine(四点[0],四点[2]).set_color(GREEN)
        Line_6x=DashedLine(五点[0],五点[2]).set_color(GREEN)
        Line_7x=DashedLine(底上[0],底上[3]).set_color(GREEN)
        Line_8x=DashedLine(一上[0],一上[3]).set_color(GREEN)
        Line_9x=DashedLine(二上[1],二上[3]).set_color(GREEN)
        Line_10x=DashedLine(三上[1],三上[3]).set_color(GREEN)
        Line_11x=DashedLine(四上[0],四上[2]).set_color(GREEN)
        Line_12x=DashedLine(五上[0],五上[2]).set_color(GREEN)

        虚正方形=VGroup(Line_1x,Line_2x,Line_3x,Line_4x,Line_5x,Line_6x,Line_7x,Line_8x,Line_9x,Line_10x,Line_11x,Line_12x)

        Line_one_1=DashedLine(底点[0],底点[3]).set_color(GREEN)
        Line_one_2=Line_2.copy()
        Line_one_3=DashedLine(二点[1],二点[3]).set_color(GREEN)
        Line_one_4=Line_6.copy()
        Line_one_5=Line(底点[1],底点[2]).set_color(ORANGE)
        Line_one_6=Line(底点[1],底点[0]).set_color(ORANGE)
        Line_one_7=DashedLine(底点[2],底点[3]).set_color(ORANGE)
        Line_one_8=Line(底点[1],五点[2]).set_color(ORANGE)
        Line_one_9=Line(底点[2],一点[3]).set_color(ORANGE)
        groupone=VGroup(Line_one_1,Line_one_2,Line_one_3,Line_one_4,Line_one_5,Line_one_6,Line_one_7,Line_one_8,Line_one_9)

        Line_two_1=Line_12.copy()
        Line_two_2=Line_7.copy()
        Line_two_3=Line_8.copy()
        Line_two_4=Line_9.copy()
        Line_two_5=Line(底上[1],底上[2]).set_color(ORANGE)
        Line_two_6=Line(底上[0],底上[1]).set_color(ORANGE)
        Line_two_7=Line(底上[2],底上[3]).set_color(ORANGE)
        Line_two_8=Line(一上[0],一上[1]).set_color(ORANGE)
        Line_two_9=DashedLine(一上[2],一上[3]).set_color(ORANGE)
        grouptwo=VGroup(Line_two_9,Line_two_1,Line_two_2,Line_two_3,Line_two_4,Line_two_5,Line_two_6,Line_two_7,Line_two_8)

        Line_three_1=Line_2.copy()
        Line_three_2=Line_11.copy()
        Line_three_3=Line_7.copy()
        Line_three_4=Line_10.copy()
        Line_three_5=Line(四上[3],四上[4]).set_color(ORANGE)
        Line_three_6=Line(四上[0],四上[4]).set_color(ORANGE)
        Line_three_7=Line(四上[2],四上[3]).set_color(ORANGE)
        Line_three_8=Line(三上[0],三上[1]).set_color(ORANGE)
        Line_three_9=Line(三上[3],三上[4]).set_color(ORANGE)
        groupthree=VGroup(Line_three_1,Line_three_2,Line_three_3,Line_three_4,Line_three_5,Line_three_6,Line_three_7,Line_three_8,Line_three_9)

        Line_four_1=Line_11.copy()
        Line_four_2=DashedLine(四点[0],四点[2]).set_color(GREEN)
        Line_four_3=Line_6.copy()
        Line_four_4=Line_12.copy()
        Line_four_5=Line(五点[3],五点[4]).set_color(ORANGE)
        Line_four_6=Line(五点[0],五点[4]).set_color(ORANGE)
        Line_four_7=Line(五点[2],五点[3]).set_color(ORANGE)
        Line_four_8=Line(五上[0],五上[4]).set_color(ORANGE)
        Line_four_9=Line(五上[2],五上[3]).set_color(ORANGE)
        groupfour=VGroup(Line_four_1,Line_four_2,Line_four_3,Line_four_4,Line_four_5,Line_four_6,Line_four_7,Line_four_8,Line_four_9)

        Line_five_1=Line_10.copy()
        Line_five_2=DashedLine(二点[1],二点[3]).set_color(GREEN)
        Line_five_3=Line_4.copy()
        Line_five_4=Line_9.copy()
        Line_five_5=Line(三上[1],三上[2]).set_color(ORANGE)
        Line_five_6=Line(三上[3],三上[2]).set_color(ORANGE)
        Line_five_7=DashedLine(二点[0],二点[4]).set_color(ORANGE)
        Line_five_8=DashedLine(三点[1],三点[2]).set_color(ORANGE)
        Line_five_9=DashedLine(三点[2],三点[3]).set_color(ORANGE)
        groupfive=VGroup(Line_five_3,Line_five_4,Line_five_5,Line_five_6,Line_five_7,Line_five_8,Line_five_9,Line_five_2,Line_five_1)

        Line_six_1=Line_8.copy()
        Line_six_2=Line_4.copy()
        Line_six_3=DashedLine(底点[0],底点[3]).set_color(GREEN)
        Line_six_4=DashedLine(四点[0],四点[2]).set_color(GREEN)
        Line_six_5=DashedLine(三点[0],三点[4]).set_color(ORANGE)
        Line_six_6=DashedLine(三点[0],三点[1]).set_color(ORANGE)
        Line_six_7=DashedLine(三点[3],三点[4]).set_color(ORANGE)
        Line_six_8=DashedLine(四点[0],四点[4]).set_color(ORANGE)
        Line_six_9=DashedLine(四点[3],四点[2]).set_color(ORANGE)
        groupsix=VGroup(Line_six_1,Line_six_2,Line_six_3,Line_six_4,Line_six_5,Line_six_6,Line_six_7,Line_six_8,Line_six_9)

        total=VGroup(groupone,grouptwo,groupthree,groupfour,groupfive,groupsix)

        self.play(FadeIn(whole))
        self.play(Write(Line_1x))
        self.play(Write(Line_2x))
        self.play(Write(Line_3x))
        self.play(Write(Line_4x))
        self.play(Write(Line_5x))
        self.play(Write(Line_6x))
        self.play(Write(Line_7x))
        self.play(Write(Line_8x))
        self.play(Write(Line_9x))
        self.play(Write(Line_10x))
        self.play(Write(Line_11x))
        self.play(Write(Line_12x))
        self.play(FadeIn(total))
        self.play(FadeOut(whole))
        self.wait(3)
        self.play(groupone.move_to,[0,-5.7,2])
        self.play(grouptwo.move_to,[0,-3.3,2])
        self.play(groupthree.move_to,[0,-1,2])
        self.play(groupfour.move_to,[0,1.3,2])
        self.play(groupfive.move_to,[0,3.3,2])
        self.play(groupsix.move_to,[0,5.5,2])
        self.wait(6.1)

        self.stop_ambient_camera_rotation()
        self.play(FadeTransform(groupone,groupfour),FadeTransform(grouptwo,groupfour),\
                  FadeTransform(groupthree,groupfour),FadeTransform(groupfive,groupfour),\
                  FadeTransform(groupsix,groupfour))

        乘六=TextMobject(" * 6").set_color(ORANGE)
        self.add_fixed_in_frame_mobjects(乘六.next_to([2,-2,0]))
        self.play(FadeIn(乘六))

        self.play(FadeOutAndShift(短边[0],direction=UP),FadeOutAndShift(长边新[0],direction=DOWN))
        橙=TextMobject("橙边").set_color(ORANGE)
        self.add_fixed_in_frame_mobjects(橙.next_to(短边[0],ORIGIN))
        绿=TextMobject("绿边").set_color(GREEN)
        self.add_fixed_in_frame_mobjects(绿.next_to(长边新[0],ORIGIN))
        self.play(DrawBorderThenFill(橙),DrawBorderThenFill(绿))
                 
        V正=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(V正.next_to(长边新,DOWN))
        正方体=TextMobject("正方体").scale(0.7)
        self.add_fixed_in_frame_mobjects(正方体.next_to(V正,RIGHT*0.3+DOWN*0.1))
        V正方体=VGroup(V正,正方体)
        立方_1=TexMobject("=","\\text{绿边}","^3")
        立方_2=TexMobject("=(\\frac{\\sqrt{5}+1}{2})^3")
        立方_3=TexMobject("=\\sqrt{5}+2}")
        立方_1[1].set_color(GREEN)
        self.add_fixed_in_frame_mobjects(立方_1.next_to(V正方体,RIGHT,aligned_edge=UP))
        self.add_fixed_in_frame_mobjects(立方_2.next_to(立方_1,DOWN,aligned_edge=LEFT))
        self.add_fixed_in_frame_mobjects(立方_3.next_to(立方_2,DOWN,aligned_edge=LEFT))
        立方=VGroup(立方_1,立方_2,立方_3)
        等式1=VGroup(V正方体,立方)
        等式1.next_to(绿,DOWN*1.5,aligned_edge=LEFT)
        self.play(DrawBorderThenFill(等式1))

        self.play(FadeOut(立方))
        self.play(V正方体.shift,[0,-0.3,0])
        self.add_fixed_in_frame_mobjects(立方_3.next_to(正方体,RIGHT))
        self.play(ShowCreation(立方_3.shift(array([0,0.3,0]))))
        self.play(FadeOut(虚正方形))
        self.play(FadeOutAndShiftDown(乘六))
        self.play(Rotate(groupfour,angle=-37*DEGREES,axis=array([-2.1,1,0])))
        self.play(groupfour.shift,[0,0,-4])

        k1=[groupfour[1].get_start(),groupfour[1].get_end()]
        k2=[groupfour[4].get_start(),groupfour[4].get_end()]
        k3=[groupfour[0].get_start(),groupfour[0].get_end()]
        dot1=Dot(k1[0])
        dot2=Dot(k1[1])
        dot3=Dot(k2[0])
        dot4=Dot(k2[1])
        dot5=Dot(k3[0])
        dot6=Dot(k3[1])
        dot7=Dot(array(k1[0])/(sqrt(5)+1)*(sqrt(5)-1)+array(k3[1])/(sqrt(5)+1)*2)
        dot8=Dot(array(k1[1])/(sqrt(5)+1)*(sqrt(5)-1)+array(k3[0])/(sqrt(5)+1)*2)

        linez1=DashedLine(dot1.get_center(),dot2.get_center()).set_color(GREEN)
        linez2=Line(dot1.get_center(),dot4.get_center()).set_color(ORANGE)
        linez3=Line(dot2.get_center(),dot4.get_center()).set_color(ORANGE)
        linez4=Line(dot3.get_center(),dot4.get_center()).set_color(ORANGE)
        linez5=DashedLine(dot7.get_center(),dot8.get_center()).set_color(GREEN)
        linez6=Line(dot1.get_center(),dot7.get_center()).set_color(ORANGE)
        linez7=Line(dot2.get_center(),dot8.get_center()).set_color(ORANGE)
        linez8=Line(dot3.get_center(),dot7.get_center()).set_color(ORANGE)
        linez9=Line(dot3.get_center(),dot8.get_center()).set_color(ORANGE)
        棱柱=VGroup(linez1,linez5,linez2,linez3,linez4,linez6,linez7,linez8,linez9)

        lineu1=Line(dot7.get_center(),dot8.get_center()).set_color(GREEN)
        lineu2=Line(dot6.get_center(),dot7.get_center()).set_color(PURPLE)
        lineu3=Line(dot5.get_center(),dot8.get_center()).set_color(PURPLE)
        lineu4=Line(dot3.get_center(),dot7.get_center()).set_color(ORANGE)
        lineu5=linez9=Line(dot3.get_center(),dot8.get_center()).set_color(ORANGE)
        lineu6=Line(dot3.get_center(),dot6.get_center()).set_color(ORANGE)
        lineu7=Line(dot3.get_center(),dot5.get_center()).set_color(ORANGE)
        lineu8=Line(dot5.get_center(),dot6.get_center()).set_color(GREEN)
        棱锥=VGroup(lineu1,lineu2,lineu3,lineu4,lineu5,lineu6,lineu7,lineu8)

        self.play(Write(棱柱))
        self.wait(2)
        self.play(Write(棱锥))
        self.play(FadeOut(groupfour))
        self.play(棱柱.shift,[-2,0,0],棱锥.shift,[1,0,0])
        self.wait(2)
        
        紫边=TextMobject("紫边").set_color(PURPLE)
        self.add_fixed_in_frame_mobjects(紫边.next_to(V正方体,DOWN,aligned_edge=LEFT))
        紫边转=TextMobject("=","绿边","-","橙边")
        紫边转[1].set_color(GREEN)
        紫边转[3].set_color(ORANGE)
        self.add_fixed_in_frame_mobjects(紫边转.next_to(紫边,RIGHT))
        紫边转值=TexMobject("=\\frac{\\sqrt{5}-1}{2}")
        self.add_fixed_in_frame_mobjects(紫边转值.next_to(紫边转,DOWN,aligned_edge=LEFT))
        self.play(FadeIn(紫边),FadeIn(紫边转),FadeIn(紫边转值))
        self.wait(2)
        self.play(FadeOut(紫边转))
        self.play(紫边转值.shift,[0,1,0])
        self.play(紫边.shift,[0,1,0],紫边转值.shift,[0,1,0],V正方体.shift,[0,-1.2,0],立方_3.shift,[0,-1,0])

        棱柱V_1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(棱柱V_1.next_to(V正方体,DOWN*1.2,aligned_edge=LEFT))
        棱柱V_2=TextMobject("棱柱").scale(0.7)
        self.add_fixed_in_frame_mobjects(棱柱V_2.next_to(棱柱V_1,RIGHT*0.3+DOWN*0.1))
        棱柱V=VGroup(棱柱V_1,棱柱V_2)
        棱柱表达式=TexMobject("=","\\text{侧}","\\text{面}","*","\\text{高}","*","\\frac{1}{2}")
        棱柱表达式[1].set_color(GREEN)
        棱柱表达式[2].set_color(ORANGE)
        棱柱表达式[4].set_color(RED)
        self.add_fixed_in_frame_mobjects(棱柱表达式.next_to(棱柱V,RIGHT))
        self.play(Write(棱柱V),Write(棱柱表达式))
        
        棱锥V_1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(棱锥V_1.next_to(棱柱V_1,DOWN*2.1))
        棱锥V_2=TextMobject("棱锥").scale(0.7)
        self.add_fixed_in_frame_mobjects(棱锥V_2.next_to(棱锥V_1,RIGHT*0.3+DOWN*0.1))
        棱锥V=VGroup(棱锥V_1,棱锥V_2)
        棱锥表达式=TexMobject("=","\\text{锥}","\\text{底}","*","\\text{高}","*","\\frac{1}{3}")
        棱锥表达式[1].set_color(GREEN)
        棱锥表达式[2].set_color(PURPLE)
        棱锥表达式[4].set_color(RED)
        self.add_fixed_in_frame_mobjects(棱锥表达式.next_to(棱锥V,RIGHT))
        self.play(Write(棱锥V),Write(棱锥表达式))
        self.wait(2)
        
        self.play(棱柱表达式[3::].shift,[1.7,0,0])
        侧面转=TextMobject("绿边","*","橙边")
        侧面转[0].set_color(GREEN)
        侧面转[2].set_color(ORANGE)
        self.add_fixed_in_frame_mobjects(侧面转.next_to(棱柱表达式[0],RIGHT))
        self.play(FadeOut(棱柱表达式[1:3],run_time=2),FadeIn(侧面转,run_time=2))
        self.wait(1.5)
        侧面转值=TexMobject("\\frac{\\sqrt{5}+1}{2}")
        self.add_fixed_in_frame_mobjects(侧面转值.next_to(棱柱表达式[0],RIGHT))
        self.play(FadeOut(侧面转),FadeIn(侧面转值))
        self.play(棱柱表达式[3::].shift,[-1,0,0])

        self.play(棱锥表达式[3::].shift,[1.7,0,0])
        锥面转=TextMobject("绿边","*","紫边")
        锥面转[0].set_color(GREEN)
        锥面转[2].set_color(PURPLE)
        self.add_fixed_in_frame_mobjects(锥面转.next_to(棱锥表达式[0],RIGHT))
        self.play(FadeOut(棱锥表达式[1:3]),FadeIn(锥面转))
        self.wait(1.5)
        锥面转值=TextMobject("1")
        self.add_fixed_in_frame_mobjects(锥面转值.next_to(棱锥表达式[0],RIGHT))
        self.play(FadeOut(锥面转,run_time=2),FadeIn(锥面转值,run_time=2))
        self.play(棱锥表达式[3::].shift,[-2.2,0,0])

        self.play(FadeOut(棱柱))
        self.play(棱锥.shift,[-1,0,2],棱锥.scale,2)
        self.play(Rotate(棱锥,axis=array([1,0,0]),angle=PI/3))

        r1=[棱锥[0].get_start(),棱锥[2].get_start(),棱锥[3].get_start(),棱锥[1].get_start()]
        dotr1=Dot(r1[0])
        dotr2=Dot(r1[1])
        dotr3=Dot(r1[2])
        dotr4=Dot(r1[3])
        dotcenter=array(dotr1.get_center())/2+array(dotr2.get_center())/2
        Linehigh=DashedLine(dotr3.get_center(),dotcenter).set_color(RED)
        Linewhite1=DashedLine(dotr1.get_center(),dotr2.get_center())
        Linewhite2=DashedLine(dotr4.get_center(),dotcenter)
        self.play(ShowCreation(Linewhite1,rnu_time=1.5))
        j=lineu6.copy()
        self.play(ShowCreation(j))
        self.play(ShowCreation(Linewhite2,rnu_time=1.5))
        self.play(ShowCreation(Linehigh,run_time=1.5))

        求高公式=TexMobject("\\text{高}","=","\\sqrt","{\\text{橙边}","^2","-","(","\\text{绿边}","^2","+","\\text{紫边}","^2",")/4")
        求高公式[0].set_color(RED)
        求高公式[3].set_color(ORANGE)
        求高公式[7].set_color(GREEN)
        求高公式[10].set_color(PURPLE)
        self.add_fixed_in_frame_mobjects(求高公式.move_to([1.2,3.3,0]))
        self.play(Write(求高公式))
        self.wait(5)
        求高公式变形=TexMobject("\\frac{1}{2}")
        self.add_fixed_in_frame_mobjects(求高公式变形.next_to(求高公式[1],RIGHT))
        self.play(FadeOut(求高公式[2::]),FadeIn(求高公式变形.next_to(求高公式[1],RIGHT)))
        self.wait()

        值一=TexMobject("\\frac{1}{2}")
        self.add_fixed_in_frame_mobjects(值一.next_to(棱柱表达式[3]))
        self.play(FadeOut(棱柱表达式[4],FadeIn(值一.next_to(棱柱表达式[3]))))
        值二=TexMobject("\\frac{1}{2}")
        self.add_fixed_in_frame_mobjects(值二.next_to(棱锥表达式[3]))
        self.play(FadeOut(棱锥表达式[4],FadeIn(值二.next_to(棱锥表达式[3]))))
        值三=TexMobject("\\frac{\\sqrt{5}+1}{8}")
        self.play(FadeOut(值一),FadeOut(棱柱表达式[3]),FadeOut(棱柱表达式[5::]),FadeOut(侧面转值))
        self.add_fixed_in_frame_mobjects(值三.next_to(棱柱表达式[0],RIGHT))
        self.play(FadeIn(值三))
        值四=TexMobject("\\frac{1}{6}")
        self.play(FadeOut(值二),FadeOut(棱锥表达式[3]),FadeOut(棱锥表达式[5::]),FadeOut(锥面转值))
        self.add_fixed_in_frame_mobjects(值四.next_to(棱锥表达式[0],RIGHT))
        self.play(FadeIn(值四))
        self.wait(2)

        self.play(FadeOut(棱锥),FadeOut(Linehigh),FadeOut(Linewhite1),FadeOut(Linewhite2),FadeOut(j))
        self.play(FadeOut(求高公式[0:2]),FadeOut(求高公式变形))
        self.play(FadeOut(紫边),FadeOut(紫边转值),FadeOut(橙),FadeOut(绿),FadeOut(长边新[1:3]),FadeOut(短边[1:3]))

        最终字幕V1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(最终字幕V1.move_to([-5,3,0]))
        最终字幕V2=TextMobject("正十二面体").scale(0.7)
        self.add_fixed_in_frame_mobjects(最终字幕V2.next_to(最终字幕V1,RIGHT*0.3+DOWN*0.1))
        最终字幕V=VGroup(最终字幕V1,最终字幕V2)
        最终字幕等于号1=TextMobject("=")
        self.add_fixed_in_frame_mobjects(最终字幕等于号1.next_to(最终字幕V,RIGHT))
        最终字幕等于号1.shift([0,0.08,0])
        最终字幕V正1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(最终字幕V正1.next_to(最终字幕等于号1,RIGHT))
        最终字幕V正2=TextMobject("正方体").scale(0.7)
        self.add_fixed_in_frame_mobjects(最终字幕V正2.next_to(最终字幕V正1,RIGHT*0.3+DOWN*0.1))
        最终字幕V正=VGroup(最终字幕V正1,最终字幕V正2)
        最终字幕V正.shift([0,0.08,0])
        最终字幕加号1=TextMobject("+")
        self.add_fixed_in_frame_mobjects(最终字幕加号1.next_to(最终字幕V正,RIGHT))
        最终字幕加号1.shift([0,0.08,0])
        最终字幕V柱1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(最终字幕V柱1.next_to(最终字幕加号1,RIGHT))
        最终字幕V柱2=TextMobject("棱柱").scale(0.7)
        self.add_fixed_in_frame_mobjects(最终字幕V柱2.next_to(最终字幕V柱1,RIGHT*0.3+DOWN*0.1))
        最终字幕V柱=VGroup(最终字幕V柱1,最终字幕V柱2)
        最终字幕V柱.shift([0,0.08,0])
        最终字幕乘号1=TextMobject("*6 +")
        self.add_fixed_in_frame_mobjects(最终字幕乘号1.next_to(最终字幕V柱,RIGHT))
        最终字幕乘号1.shift([0,0.08,0])
        最终字幕V锥1=TextMobject("V").scale(1.5)
        self.add_fixed_in_frame_mobjects(最终字幕V锥1.next_to(最终字幕乘号1,RIGHT))
        最终字幕V锥2=TextMobject("棱锥").scale(0.7)
        self.add_fixed_in_frame_mobjects(最终字幕V锥2.next_to(最终字幕V锥1,RIGHT*0.3+DOWN*0.1))
        最终字幕V锥=VGroup(最终字幕V锥1,最终字幕V锥2)
        最终字幕V锥.shift([0,0.08,0])
        最终字幕乘号2=TextMobject("*6")
        self.add_fixed_in_frame_mobjects(最终字幕乘号2.next_to(最终字幕V锥,RIGHT))
        最终字幕乘号2.shift([0,0.08,0])
        最终字幕=VGroup(最终字幕V,最终字幕等于号1,最终字幕V正,最终字幕加号1,最终字幕V柱,最终字幕乘号1,最终字幕V锥,最终字幕乘号2)
        self.play(DrawBorderThenFill(最终字幕))
        最终值=TexMobject("=","\\frac{15+7\\sqrt{5}}{4}")
        self.add_fixed_in_frame_mobjects(最终值.next_to(最终字幕等于号1,DOWN,aligned_edge=LEFT))
        最终值.shift([0,-1,0])
        self.play(DrawBorderThenFill(最终值))
        self.wait(2)
        self.play(FadeOut(最终字幕),FadeOut(最终值[0]),FadeOut(值三),FadeOut(值四),FadeOut(棱柱表达式[0]),\
                  FadeOut(棱锥表达式[0]),FadeOut(V正方体),FadeOut(棱柱V),FadeOut(棱锥V),FadeOut(立方_3))
        self.play(最终值[1].move_to,ORIGIN,最终值[1].scale,2)
        self.play(最终值[1].set_color,GOLD_A)
        self.wait(4)
        self.play(FadeOut(最终值[1]))
        self.wait(2)






















        
